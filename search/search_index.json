{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Self-hosted open source multimedia scrobbler Installing \u00b6 pip install pyscrobbler A Simple Example \u00b6 import pyscrobbler # noqa # noqa References \u00b6 As most open sourced programs, pyscrobbler is standing on the shoulders of giants, namely: Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakehell Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. Pip-tools Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer. Contributing \u00b6 For guidance on setting up a development environment, and how to make a contribution to pyscrobbler , see Contributing to pyscrobbler .","title":"Overview"},{"location":"#installing","text":"pip install pyscrobbler","title":"Installing"},{"location":"#a-simple-example","text":"import pyscrobbler # noqa # noqa","title":"A Simple Example"},{"location":"#references","text":"As most open sourced programs, pyscrobbler is standing on the shoulders of giants, namely: Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakehell Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. Pip-tools Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer.","title":"References"},{"location":"#contributing","text":"For guidance on setting up a development environment, and how to make a contribution to pyscrobbler , see Contributing to pyscrobbler .","title":"Contributing"},{"location":"contributing/","text":"So you've started using pyscrobbler and want to show your gratitude to the project, depending on your programming skills there are different ways to do so. I don't know how to program \u00b6 There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it. I know how to program in Python \u00b6 If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you. Issues \u00b6 Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import pyscrobbler.version; print(pyscrobbler.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install pyscrobbler or know it's not relevant to your question or feature request. Pull Requests \u00b6 pyscrobbler is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github. Development facilities \u00b6 To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/pyscrobbler.git cd pyscrobbler Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install pyscrobbler, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: pyscrobbler uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to pyscrobbler !","title":"Contributing"},{"location":"contributing/#i-dont-know-how-to-program","text":"There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it.","title":"I don't know how to program"},{"location":"contributing/#i-know-how-to-program-in-python","text":"If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you.","title":"I know how to program in Python"},{"location":"contributing/#issues","text":"Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import pyscrobbler.version; print(pyscrobbler.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install pyscrobbler or know it's not relevant to your question or feature request.","title":"Issues"},{"location":"contributing/#pull-requests","text":"pyscrobbler is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.","title":"Pull Requests"},{"location":"contributing/#development-facilities","text":"To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/pyscrobbler.git cd pyscrobbler Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install pyscrobbler, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: pyscrobbler uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to pyscrobbler !","title":"Development facilities"},{"location":"reference/","text":"pyscrobbler special \u00b6 Self-hosted open source multimedia scrobbler. adapters special \u00b6 Module to store the functions shared by the different adapters. config \u00b6 Define the configuration of the main program. Config \u00b6 Expose the configuration in a friendly way. Public methods: get: Fetch the configuration value of the specified key. load: Load the configuration from the configuration YAML file. save: Saves the configuration in the configuration YAML file. Attributes and properties: config_path (str): Path to the configuration file. data(dict): Program configuration. __init__ ( self , config_path = '~/.local/share/pyscrobbler/config.yaml' ) special \u00b6 Configure the attributes and load the configuration. Source code in pyscrobbler/config.py def __init__ ( self , config_path : str = \"~/.local/share/pyscrobbler/config.yaml\" ) -> None : \"\"\"Configure the attributes and load the configuration.\"\"\" super () . __init__ () self . config_path = os . path . expanduser ( config_path ) self . load () get ( self , key , default = None ) \u00b6 Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' Source code in pyscrobbler/config.py def get ( self , key : str , default : Any = None ) -> Union [ str , int , Dict [ str , Any ], List [ Any ]]: \"\"\"Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' \"\"\" original_key = key config_keys = key . split ( \".\" ) value = self . data . copy () for config_key in config_keys : try : value = value [ config_key ] except KeyError as error : if default is not None : return default raise ConfigError ( f \"Failed to fetch the configuration { config_key } \" f \"when searching for { original_key } \" ) from error return value load ( self ) \u00b6 Load the configuration from the configuration YAML file. Source code in pyscrobbler/config.py def load ( self ) -> None : \"\"\"Load the configuration from the configuration YAML file.\"\"\" try : with open ( os . path . expanduser ( self . config_path ), \"r\" ) as file_cursor : try : self . data = YAML () . load ( file_cursor ) except ( ParserError , ScannerError ) as error : raise ConfigError ( str ( error )) from error except FileNotFoundError as error : raise ConfigError ( \"The configuration file {self.config_path} could not be found.\" ) from error save ( self ) \u00b6 Save the configuration in the configuration YAML file. Source code in pyscrobbler/config.py def save ( self ) -> None : \"\"\"Save the configuration in the configuration YAML file.\"\"\" with open ( os . path . expanduser ( self . config_path ), \"w+\" ) as file_cursor : yaml = YAML () yaml . default_flow_style = False yaml . dump ( self . data , file_cursor ) set ( self , key , value ) \u00b6 Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') Source code in pyscrobbler/config.py def set ( self , key : str , value : Union [ str , int ]) -> None : \"\"\"Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') \"\"\" config_keys : List [ str ] = key . split ( \".\" ) last_key = config_keys . pop ( - 1 ) # Initialize the dictionary structure parent = self . data for config_key in config_keys : try : parent = parent [ config_key ] except KeyError : parent [ config_key ] = {} parent = parent [ config_key ] # Set value parent [ last_key ] = value ConfigError \u00b6 Catch configuration errors. entrypoints special \u00b6 Define the different ways to expose the program functionality. Functions load_logger: Configure the Logging logger. load_config ( config_path ) \u00b6 Load the configuration from the file. Source code in pyscrobbler/entrypoints/__init__.py def load_config ( config_path : str ) -> Config : \"\"\"Load the configuration from the file.\"\"\" log . debug ( f \"Loading the configuration from file { config_path } \" ) try : config = Config ( config_path ) except ConfigError as error : log . error ( f \"Configuration Error: { str ( error ) } \" ) sys . exit ( 1 ) except FileNotFoundError : log . error ( f \"Error opening configuration file { config_path } \" ) sys . exit ( 1 ) return config load_logger ( verbose = False ) \u00b6 Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in pyscrobbler/entrypoints/__init__.py def load_logger ( verbose : bool = False ) -> None : # pragma no cover \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" logging . addLevelName ( logging . INFO , \"[ \\033 [36m+ \\033 [0m]\" ) logging . addLevelName ( logging . ERROR , \"[ \\033 [31m+ \\033 [0m]\" ) logging . addLevelName ( logging . DEBUG , \"[ \\033 [32m+ \\033 [0m]\" ) logging . addLevelName ( logging . WARNING , \"[ \\033 [33m+ \\033 [0m]\" ) if verbose : logging . basicConfig ( stream = sys . stderr , level = logging . DEBUG , format = \" %(levelname)s %(message)s \" ) else : logging . basicConfig ( stream = sys . stderr , level = logging . INFO , format = \" %(levelname)s %(message)s \" ) cli \u00b6 Command line interface definition. model special \u00b6 Module to store the common business model of all entities. Abstract Classes: services \u00b6 Gather all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose. version \u00b6 Utilities to retrieve the information of the program version. version_info () \u00b6 Display the version of the program, python and the platform. Source code in pyscrobbler/version.py def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" info = { \"pyscrobbler version\" : __version__ , \"python version\" : sys . version . replace ( \" \\n \" , \" \" ), \"platform\" : platform . platform (), } return \" \\n \" . join ( f \" { k + ':' : >30 } { v } \" for k , v in info . items ())","title":"Reference"},{"location":"reference/#pyscrobbler","text":"Self-hosted open source multimedia scrobbler.","title":"pyscrobbler"},{"location":"reference/#pyscrobbler.adapters","text":"Module to store the functions shared by the different adapters.","title":"adapters"},{"location":"reference/#pyscrobbler.config","text":"Define the configuration of the main program.","title":"config"},{"location":"reference/#pyscrobbler.config.Config","text":"Expose the configuration in a friendly way. Public methods: get: Fetch the configuration value of the specified key. load: Load the configuration from the configuration YAML file. save: Saves the configuration in the configuration YAML file. Attributes and properties: config_path (str): Path to the configuration file. data(dict): Program configuration.","title":"Config"},{"location":"reference/#pyscrobbler.config.Config.__init__","text":"Configure the attributes and load the configuration. Source code in pyscrobbler/config.py def __init__ ( self , config_path : str = \"~/.local/share/pyscrobbler/config.yaml\" ) -> None : \"\"\"Configure the attributes and load the configuration.\"\"\" super () . __init__ () self . config_path = os . path . expanduser ( config_path ) self . load ()","title":"__init__()"},{"location":"reference/#pyscrobbler.config.Config.get","text":"Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' Source code in pyscrobbler/config.py def get ( self , key : str , default : Any = None ) -> Union [ str , int , Dict [ str , Any ], List [ Any ]]: \"\"\"Fetch the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if the configuration contents are: self.data = { 'first': { 'second': 'value' }, } self.data.get('first.second') == 'value' \"\"\" original_key = key config_keys = key . split ( \".\" ) value = self . data . copy () for config_key in config_keys : try : value = value [ config_key ] except KeyError as error : if default is not None : return default raise ConfigError ( f \"Failed to fetch the configuration { config_key } \" f \"when searching for { original_key } \" ) from error return value","title":"get()"},{"location":"reference/#pyscrobbler.config.Config.load","text":"Load the configuration from the configuration YAML file. Source code in pyscrobbler/config.py def load ( self ) -> None : \"\"\"Load the configuration from the configuration YAML file.\"\"\" try : with open ( os . path . expanduser ( self . config_path ), \"r\" ) as file_cursor : try : self . data = YAML () . load ( file_cursor ) except ( ParserError , ScannerError ) as error : raise ConfigError ( str ( error )) from error except FileNotFoundError as error : raise ConfigError ( \"The configuration file {self.config_path} could not be found.\" ) from error","title":"load()"},{"location":"reference/#pyscrobbler.config.Config.save","text":"Save the configuration in the configuration YAML file. Source code in pyscrobbler/config.py def save ( self ) -> None : \"\"\"Save the configuration in the configuration YAML file.\"\"\" with open ( os . path . expanduser ( self . config_path ), \"w+\" ) as file_cursor : yaml = YAML () yaml . default_flow_style = False yaml . dump ( self . data , file_cursor )","title":"save()"},{"location":"reference/#pyscrobbler.config.Config.set","text":"Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') Source code in pyscrobbler/config.py def set ( self , key : str , value : Union [ str , int ]) -> None : \"\"\"Set the configuration value of the specified key. If there are nested dictionaries, a dot notation can be used. So if you want to set the configuration: self.data = { 'first': { 'second': 'value' }, } self.data.set('first.second', 'value') \"\"\" config_keys : List [ str ] = key . split ( \".\" ) last_key = config_keys . pop ( - 1 ) # Initialize the dictionary structure parent = self . data for config_key in config_keys : try : parent = parent [ config_key ] except KeyError : parent [ config_key ] = {} parent = parent [ config_key ] # Set value parent [ last_key ] = value","title":"set()"},{"location":"reference/#pyscrobbler.config.ConfigError","text":"Catch configuration errors.","title":"ConfigError"},{"location":"reference/#pyscrobbler.entrypoints","text":"Define the different ways to expose the program functionality. Functions load_logger: Configure the Logging logger.","title":"entrypoints"},{"location":"reference/#pyscrobbler.entrypoints.load_config","text":"Load the configuration from the file. Source code in pyscrobbler/entrypoints/__init__.py def load_config ( config_path : str ) -> Config : \"\"\"Load the configuration from the file.\"\"\" log . debug ( f \"Loading the configuration from file { config_path } \" ) try : config = Config ( config_path ) except ConfigError as error : log . error ( f \"Configuration Error: { str ( error ) } \" ) sys . exit ( 1 ) except FileNotFoundError : log . error ( f \"Error opening configuration file { config_path } \" ) sys . exit ( 1 ) return config","title":"load_config()"},{"location":"reference/#pyscrobbler.entrypoints.load_logger","text":"Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in pyscrobbler/entrypoints/__init__.py def load_logger ( verbose : bool = False ) -> None : # pragma no cover \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" logging . addLevelName ( logging . INFO , \"[ \\033 [36m+ \\033 [0m]\" ) logging . addLevelName ( logging . ERROR , \"[ \\033 [31m+ \\033 [0m]\" ) logging . addLevelName ( logging . DEBUG , \"[ \\033 [32m+ \\033 [0m]\" ) logging . addLevelName ( logging . WARNING , \"[ \\033 [33m+ \\033 [0m]\" ) if verbose : logging . basicConfig ( stream = sys . stderr , level = logging . DEBUG , format = \" %(levelname)s %(message)s \" ) else : logging . basicConfig ( stream = sys . stderr , level = logging . INFO , format = \" %(levelname)s %(message)s \" )","title":"load_logger()"},{"location":"reference/#pyscrobbler.entrypoints.cli","text":"Command line interface definition.","title":"cli"},{"location":"reference/#pyscrobbler.model","text":"Module to store the common business model of all entities. Abstract Classes:","title":"model"},{"location":"reference/#pyscrobbler.services","text":"Gather all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose.","title":"services"},{"location":"reference/#pyscrobbler.version","text":"Utilities to retrieve the information of the program version.","title":"version"},{"location":"reference/#pyscrobbler.version.version_info","text":"Display the version of the program, python and the platform. Source code in pyscrobbler/version.py def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" info = { \"pyscrobbler version\" : __version__ , \"python version\" : sys . version . replace ( \" \\n \" , \" \" ), \"platform\" : platform . platform (), } return \" \\n \" . join ( f \" { k + ':' : >30 } { v } \" for k , v in info . items ())","title":"version_info()"}]}